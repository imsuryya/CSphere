"use client"

import { useState, useRef, useEffect } from "react"
import { useParams, useNavigate } from "react-router-dom"
import { Send, ArrowLeft, ExternalLink, BookOpen, Youtube } from "lucide-react"
import { getAgentById, referenceData } from "../agents"

const ChatPage = () => {
  const { agentId } = useParams()
  const navigate = useNavigate()
  const agent = getAgentById(Number.parseInt(agentId))
  const [message, setMessage] = useState("")
  const [chatMessages, setChatMessages] = useState([])
  const [showReferences, setShowReferences] = useState(false)
  const messagesEndRef = useRef(null)

  useEffect(() => {
    if (!agent) {
      navigate("/dashboard")
      return
    }

    // Scroll to bottom whenever messages change
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [agent, navigate, chatMessages])

  const handleSendMessage = (e) => {
    e.preventDefault()
    if (!message.trim()) return

    // Add user message
    setChatMessages([...chatMessages, { sender: "user", text: message }])

    // Simulate agent response (in a real app, this would be an API call)
    setTimeout(() => {
      setChatMessages((prev) => [
        ...prev,
        {
          sender: "agent",
          text: `This is a simulated response from ${agent.name}. In a real application, this would be generated by the AI.`,
        },
      ])
    }, 1000)

    setMessage("")
  }

  if (!agent) return null

  return (
    <div className="min-h-screen bg-gradient-to-br from-white to-orange-100 flex flex-col">
      {/* Header */}
      <header className="bg-white shadow-sm p-4 flex items-center">
        <button onClick={() => navigate("/dashboard")} className="mr-4 p-2 rounded-full hover:bg-orange-100">
          <ArrowLeft size={20} />
        </button>
        <img src={agent.image || "/placeholder.svg"} alt={agent.name} className="w-10 h-10 rounded-full mr-3" />
        <div>
          <h1 className="font-semibold">{agent.name}</h1>
          <p className="text-xs text-gray-500">{agent.description}</p>
        </div>
        <button
          onClick={() => setShowReferences(!showReferences)}
          className="ml-auto p-2 rounded-full hover:bg-orange-100"
        >
          <ExternalLink size={20} className={showReferences ? "text-orange-500" : ""} />
        </button>
      </header>

      {/* Main content area */}
      <div className="flex flex-1 overflow-hidden">
        {/* Chat area */}
        <div className="flex-1 flex flex-col">
          {/* Chat history tabs */}
          <div className="bg-white p-2 border-b">
            <div className="flex space-x-2 overflow-x-auto pb-2">
              <button className="px-3 py-1 bg-orange-100 text-orange-600 rounded-full text-sm whitespace-nowrap">
                New Chat
              </button>
              {agent.chatHistory.map((chat) => (
                <button
                  key={chat.id}
                  className="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full text-sm whitespace-nowrap"
                >
                  {chat.title}
                </button>
              ))}
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {chatMessages.length === 0 ? (
              <div className="text-center text-gray-500 mt-10">
                <p>Start a conversation with {agent.name}</p>
              </div>
            ) : (
              chatMessages.map((msg, index) => (
                <div key={index} className={`flex ${msg.sender === "user" ? "justify-end" : "justify-start"}`}>
                  <div
                    className={`max-w-[80%] p-3 rounded-lg ${
                      msg.sender === "user"
                        ? "bg-orange-500 text-white rounded-tr-none"
                        : "bg-white shadow rounded-tl-none"
                    }`}
                  >
                    {msg.text}
                  </div>
                </div>
              ))
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Message input */}
          <form onSubmit={handleSendMessage} className="p-4 bg-white border-t">
            <div className="flex items-center">
              <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder={`Message ${agent.name}...`}
                className="flex-1 p-3 border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
              />
              <button
                type="submit"
                className="bg-orange-500 text-white p-3 rounded-r-lg hover:bg-orange-600"
                disabled={!message.trim()}
              >
                <Send size={20} />
              </button>
            </div>
          </form>
        </div>

        {/* References sidebar */}
        {showReferences && (
          <div className="w-80 bg-white border-l overflow-y-auto p-4 hidden md:block">
            <h2 className="font-semibold mb-4">References</h2>

            <div className="mb-6">
              <div className="flex items-center mb-2">
                <BookOpen size={16} className="mr-2 text-orange-500" />
                <h3 className="font-medium">Blog Articles</h3>
              </div>
              <ul className="space-y-2">
                {referenceData.blogs.map((blog) => (
                  <li key={blog.id}>
                    <a
                      href={blog.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-sm text-blue-600 hover:underline flex items-center"
                    >
                      {blog.title}
                      <ExternalLink size={12} className="ml-1" />
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            <div>
              <div className="flex items-center mb-2">
                <Youtube size={16} className="mr-2 text-orange-500" />
                <h3 className="font-medium">YouTube Videos</h3>
              </div>
              <ul className="space-y-2">
                {referenceData.videos.map((video) => (
                  <li key={video.id}>
                    <a
                      href={video.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-sm text-blue-600 hover:underline flex items-center"
                    >
                      {video.title}
                      <ExternalLink size={12} className="ml-1" />
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default ChatPage

